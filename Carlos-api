openapi: 3.0.3
info:
  title: API de Gerenciamento de Usuários (JSON & XML)
  description: |-
    Documentação para uma API de CRUD de usuários com suporte aos formatos JSON e XML.
    Inclui o método PATCH para atualizações parciais e códigos de resposta explícitos para cada cenário.
  version: 1.1.0

servers:
  - url: http://api.example.com/v1
    description: Servidor de Produção

tags:
  - name: Usuários
    description: Operações relacionadas aos usuários

paths:
  /usuarios:
    post:
      tags:
        - Usuários
      summary: Cria um novo usuário
      description: Adiciona um novo usuário ao sistema. O e-mail deve ser único.
      requestBody:
        description: Objeto do usuário a ser adicionado, em formato JSON ou XML.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
            example:
              nome: "João da Silva"
              email: "joao.silva@example.com"
          application/xml:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
            example:
              <Usuario>
                <nome>João da Silva</nome>
                <email>joao.silva@example.com</email>
              </Usuario>
      responses:
        '201':
          description: "**201 Created**: Usuário criado com sucesso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: "**400 Bad Request**: Requisição inválida (ex: e-mail em formato incorreto)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'
        '409':
          description: "**409 Conflict**: O e-mail informado já está em uso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

    get:
      tags:
        - Usuários
      summary: Lista todos os usuários
      description: Retorna uma lista com todos os usuários cadastrados.
      responses:
        '200':
          description: "**200 OK**: Lista de usuários retornada com sucesso."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
            application/xml:
               schema:
                type: array
                items:
                  $ref: '#/components/schemas/Usuario'
        '500':
          description: "**500 Internal Server Error**: Ocorreu um erro inesperado no servidor."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

  /usuarios/{id}:
    parameters:
      - name: id
        in: path
        description: ID do usuário a ser manipulado.
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags:
        - Usuários
      summary: Busca um usuário pelo ID
      responses:
        '200':
          description: "**200 OK**: Usuário encontrado e retornado com sucesso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: "**404 Not Found**: O usuário com o ID especificado não foi encontrado."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

    put:
      tags:
        - Usuários
      summary: Atualiza um usuário existente (PUT)
      description: Atualiza **todos** os dados de um usuário. Requer que o corpo da requisição contenha todos os campos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UsuarioInput'
      responses:
        '200':
          description: "**200 OK**: Usuário atualizado com sucesso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: "**400 Bad Request**: Dados inválidos na requisição."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'
        '404':
          description: "**404 Not Found**: O usuário com o ID especificado não foi encontrado."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

    patch:
      tags:
        - Usuários
      summary: Atualiza um usuário parcialmente (PATCH)
      description: Atualiza **um ou mais** campos de um usuário existente. Apenas os campos enviados no corpo da requisição serão alterados.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioUpdate'
            example:
              nome: "João da Silva Atualizado"
          application/xml:
            schema:
              $ref: '#/components/schemas/UsuarioUpdate'
            example:
              <Usuario>
                <nome>João da Silva Atualizado</nome>
              </Usuario>
      responses:
        '200':
          description: "**200 OK**: Usuário atualizado com sucesso."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
            application/xml:
              schema:
                $ref: '#/components/schemas/Usuario'
        '400':
          description: "**400 Bad Request**: Dados inválidos na requisição (ex: email com formato inválido)."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'
        '404':
          description: "**404 Not Found**: O usuário com o ID especificado não foi encontrado."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

    delete:
      tags:
        - Usuários
      summary: Deleta um usuário
      responses:
        '204':
          description: "**204 No Content**: Usuário deletado com sucesso. Não há corpo na resposta."
        '404':
          description: "**404 Not Found**: O usuário com o ID especificado não foi encontrado."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Erro'
            application/xml:
              schema:
                $ref: '#/components/schemas/Erro'

components:
  schemas:
    Usuario:
      type: object
      xml:
        name: Usuario
      properties:
        id:
          type: string
          format: uuid
        nome:
          type: string
        email:
          type: string
          format: email
        data_criacao:
          type: string
          format: date-time

    UsuarioInput:
      type: object
      xml:
        name: Usuario
      properties:
        nome:
          type: string
        email:
          type: string
          format: email
      required:
        - nome
        - email

    UsuarioUpdate:
      type: object
      xml:
        name: Usuario
      properties:
        nome:
          type: string
        email:
          type: string
          format: email

    Erro:
      type: object
      xml:
        name: Erro
      properties:
        codigo:
          type: integer
          example: 404
        mensagem:
          type: string
          example: "Recurso não encontrado."
